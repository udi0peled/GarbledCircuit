#include<obliv.oh>
#include<stdio.h>
#include<stdlib.h>
#include<memory.h>
#include"../common/util.h"
#include"./sha256.h"
#include"./sha256.oh"

extern double lap;

/****************************** MACROS ******************************/
#define ROTLEFT(a,b) (((a) << (b)) | ((a) >> (32-(b))))
#define ROTRIGHT(a,b) (((a) >> (b)) | ((a) << (32-(b))))

#define CH(x,y,z) (((x) & (y)) ^ (~(x) & (z)))
#define MAJ(x,y,z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
#define EP0(x) (ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22))
#define EP1(x) (ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25))
#define SIG0(x) (ROTRIGHT(x,7) ^ ROTRIGHT(x,18) ^ ((x) >> 3))
#define SIG1(x) (ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ ((x) >> 10))

/**************************** VARIABLES *****************************/
static const word k[64] = {
	0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
	0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
	0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
	0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
	0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
	0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
	0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
	0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

/*********************** FUNCTION DEFINITIONS ***********************/

// int32[8] state, char[64] data, changes state
void sha256_otransform_raw(oword state[8], const obyte data[64])
{
	oword a, b, c, d, e, f, g, h, t1, t2, m[64];
 	word  i, j;

	for (i = 0, j = 0; i < 16; ++i, j += 4)
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
	for ( ; i < 64; ++i)
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = state[0];
	b = state[1];
	c = state[2];
	d = state[3];
	e = state[4];
	f = state[5];
	g = state[6];
	h = state[7];

	for (i = 0; i < 64; ++i) {
		t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
		t2 = EP0(a) + MAJ(a,b,c);
		h = g;
		g = f;
		f = e;
		e = d + t1;
		d = c;
		c = b;
		b = a;
		a = t1 + t2;
	}

	state[0] += a;
	state[1] += b;
	state[2] += c;
	state[3] += d;
	state[4] += e;
	state[5] += f;
	state[6] += g;
	state[7] += h;
}

void sha256_otransform(sha256_octx *octx, const obyte data[])
{
	sha256_otransform_raw(octx->state, data);
}

void sha256_oinit(sha256_octx *octx)
{
	octx->datalen = 0;
	octx->bitlen = 0;
	octx->state[0] = 0x6a09e667;
	octx->state[1] = 0xbb67ae85;
	octx->state[2] = 0x3c6ef372;
	octx->state[3] = 0xa54ff53a;
	octx->state[4] = 0x510e527f;
	octx->state[5] = 0x9b05688c;
	octx->state[6] = 0x1f83d9ab;
	octx->state[7] = 0x5be0cd19;
}

void sha256_oupdate(sha256_octx *octx, const obyte data[], size_t len)
{
	word i;

	for (i = 0; i < len; ++i) {
		octx->data[octx->datalen] = data[i];
		octx->datalen++;
		if (octx->datalen == 64) {
			sha256_otransform(octx, octx->data);
			octx->bitlen += 512;
			octx->datalen = 0;
		}
	}
}

void oreverse_output_hash(oword state[8], obyte hash[32]) {
	// Since this implementation uses little endian byte ordering and SHA uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (int i = 0; i < 4; ++i) {
		hash[i]      = (state[0] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 4]  = (state[1] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 8]  = (state[2] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 12] = (state[3] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 16] = (state[4] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 20] = (state[5] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 24] = (state[6] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 28] = (state[7] >> (24 - i * 8)) & 0x000000ff;
	}
}

void sha256_ofinal(sha256_octx *octx, obyte hash[])
{
	word i;

	i = octx->datalen;

	// Pad whatever data is left in the buffer.
	if (octx->datalen < 56) {
		octx->data[i++] = 0x80;
		while (i < 56)
			octx->data[i++] = 0x00;
	}
	else {
		octx->data[i++] = 0x80;
		while (i < 64)
			octx->data[i++] = 0x00;
		sha256_otransform(octx, octx->data);
		memset(octx->data, 0, 56);
	}

	// Append to the padding the total message's length in bits and transform.
	octx->bitlen += octx->datalen * 8;
	octx->data[63] = octx->bitlen;
	octx->data[62] = octx->bitlen >> 8;
	octx->data[61] = octx->bitlen >> 16;
	octx->data[60] = octx->bitlen >> 24;
	octx->data[59] = octx->bitlen >> 32;
	octx->data[58] = octx->bitlen >> 40;
	octx->data[57] = octx->bitlen >> 48;
	octx->data[56] = octx->bitlen >> 56;
	sha256_otransform(octx, octx->data);

	oreverse_output_hash(octx->state, hash);
}

void compute_sha256(void* args)
{
  protocolIO *io = args;

  unsigned int input1_len = ocBroadcastInt(io->input_len, 1);
  unsigned int input2_len = ocBroadcastInt(io->input_len, 2);
  
  obyte *oshare1 = malloc(sizeof(obyte) * input1_len);
  obyte *oshare2 = malloc(sizeof(obyte) * input2_len);

  feedOblivCharArray(oshare1, io->input_share, input1_len, 1);
  feedOblivCharArray(oshare2, io->input_share, input2_len, 2);
  free(io->input_share);

  unsigned int min_len = input1_len < input2_len ? input1_len : input2_len;
  obyte* combined_input = malloc(sizeof(obyte) * min_len);

  for (int i=0; i<min_len; i++) {
    combined_input[i] = oshare1[i] ^ oshare2[i];
  }
  free(oshare1);
  free(oshare2);

  obyte odigest[SHA256_DIGEST_SIZE];

  sha256_octx octx;
  sha256_oinit(&octx);
  sha256_oupdate(&octx, combined_input, min_len);
  sha256_ofinal(&octx, odigest);

  revealOblivCharArray(io->msg_digest, odigest, SHA256_DIGEST_SIZE, 0);
  
  // Pring real input, for testing
  byte* rev_inp = malloc(min_len * sizeof(byte));
  revealOblivCharArray(rev_inp, combined_input, min_len, 0);
  fprintf(stderr, "combined input: ");
  printHexBytes(rev_inp, min_len);
  free(rev_inp);
  
  free(combined_input);
}

// Uses P1 for state and P2 for data, output is P0
void compute_process_raw(void* args) {

	protocolIO *io = args;

	word state[8];
	byte data[64];
	
	memset(state, 0x00, sizeof(word) * 8);
	memset(data, 0xff, sizeof(byte) * 64);

	if (ocCurrentParty() == 1) {		
		
		if (io->input_len > 8) {
			memcpy(state, io->input_share, sizeof(word) * 8);
		} else {
			memcpy(state, io->input_share, sizeof(word) * io->input_len);
		}

	} else {

		if (io->input_len > 64) {
			memcpy(data, io->input_share, sizeof(byte) * 64);
		} else {
			memcpy(data, io->input_share, sizeof(byte) * io->input_len);
		}
	}
	free(io->input_share);
  
  oword ostate[8];
  obyte odata[64];

  feedOblivCharArray(ostate, state, sizeof(word) * 8, 1);
  feedOblivCharArray(odata, data, sizeof(byte) * 64, 2);

	sha256_otransform_raw(ostate, odata);

  revealOblivCharArray(io->msg_digest, ostate, 32, 0);
}